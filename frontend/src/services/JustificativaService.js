import api from '../axios';

/**
 * Service para gerenciar Justificativas de Ponto
 * Baseado no FRONTEND_GUIDE.md - Se√ß√£o 16: Sistema de Justificativas
 * 
 * IMPORTANTE: Dois tipos de justificativa:
 * 1. PONTO_FALTANTE: Funcion√°rio esqueceu de bater (cria novo ponto se aprovado)
 * 2. CORRECAO_PONTO: Funcion√°rio bateu errado (corrige ponto existente se aprovado)
 */

const JustificativaService = {
  /**
   * TIPO 1: Solicitar Ponto Faltante
   * Quando: Funcion√°rio ESQUECEU de bater o ponto
   * Endpoint: POST /api/v1/justificativas
   * Resultado se aprovado: CRIA novo ponto
   * 
   * @param {Object} dados - { data_ocorrencia, descricao }
   * @returns {Promise<Object>} Justificativa criada
   */
  async solicitarPontoFaltante(dados) {
    try {
      // Valida√ß√£o: n√£o deve ter ponto_id
      if (dados.ponto_id) {
        throw new Error('Erro: justificativa de ponto faltante n√£o pode ter ponto_id');
      }

      const response = await api.post('/api/v1/justificativas', {
        tipo: 'PONTO_FALTANTE',
        data_ocorrencia: dados.data_ocorrencia,
        descricao: dados.descricao,
      });

      console.log('‚úÖ Ponto faltante solicitado com sucesso');
      return response.data;
    } catch (error) {
      console.error('Erro ao solicitar ponto faltante:', error);
      throw error;
    }
  },

  /**
   * TIPO 2: Solicitar Corre√ß√£o de Ponto Existente
   * Quando: Funcion√°rio bateu ponto ERRADO/ATRASADO
   * Endpoint: POST /api/v1/justificativas/solicitar-correcao
   * Resultado se aprovado: ATUALIZA ponto existente
   * 
   * @param {Object} dados - { ponto_id, nova_data_hora, descricao }
   * @returns {Promise<Object>} Solicita√ß√£o criada
   */
  async solicitarCorrecaoPonto(dados) {
    try {
      // Valida√ß√£o: ponto_id √© obrigat√≥rio
      if (!dados.ponto_id) {
        throw new Error('Erro: selecione o ponto que deseja corrigir');
      }

      // Valida√ß√£o: n√£o pode ser data futura
      if (new Date(dados.nova_data_hora) > new Date()) {
        throw new Error('Erro: n√£o √© poss√≠vel corrigir ponto no futuro');
      }

      const response = await api.post('/api/v1/justificativas/solicitar-correcao', {
        ponto_id: dados.ponto_id,
        nova_data_hora: dados.nova_data_hora,
        descricao: dados.descricao,
      });

      console.log('‚úÖ Corre√ß√£o de ponto solicitada com sucesso');
      return response.data;
    } catch (error) {
      console.error('Erro ao solicitar corre√ß√£o de ponto:', error);
      throw error;
    }
  },

  /**
   * (DEPRECATED) M√©todo antigo - use solicitarPontoFaltante ou solicitarCorrecaoPonto
   * @deprecated
   */
  async criar(dados) {
    console.warn('‚ö†Ô∏è M√©todo criar() est√° deprecated. Use solicitarPontoFaltante() ou solicitarCorrecaoPonto()');
    const response = await api.post('/api/v1/justificativas', dados);
    return response.data;
  },

  /**
   * Lista todas as justificativas do usu√°rio logado
   * Endpoint: GET /api/v1/justificativas/minhas
   * @returns {Promise<Array>} Lista de justificativas
   */
  async listarMinhas() {
    try {
      const response = await api.get('/api/v1/justificativas/minhas');
      return response.data || [];
    } catch (error) {
      console.error('Erro ao listar minhas justificativas:', error);
      throw error;
    }
  },

  /**
   * Lista justificativas pendentes (requer permiss√£o GERENCIAR_JUSTIFICATIVAS)
   * Endpoint: GET /api/v1/justificativas/pendentes
   * @returns {Promise<Array>} Lista de justificativas pendentes
   */
  async listarPendentes() {
    try {
      const response = await api.get('/api/v1/justificativas/pendentes');
      return response.data || [];
    } catch (error) {
      console.error('Erro ao listar justificativas pendentes:', error);
      throw error;
    }
  },

  /**
   * Processar justificativa (aprovar ou reprovar)
   * Endpoint: POST /api/v1/justificativas/:id/processar
   * 
   * Comportamento:
   * - Se tipo PONTO_FALTANTE + aprovado=true ‚Üí CRIA novo ponto
   * - Se tipo CORRECAO_PONTO + aprovado=true ‚Üí ATUALIZA ponto existente
   * - Se aprovado=false ‚Üí N√£o faz nada com pontos (qualquer tipo)
   * 
   * @param {Number} id - ID da justificativa
   * @param {Boolean} aprovado - true para aprovar, false para reprovar
   * @param {String} motivoReprovacao - Motivo (obrigat√≥rio se aprovado=false)
   * @returns {Promise<Object>} Resposta do processamento
   */
  async processar(id, aprovado, motivoReprovacao = '') {
    try {
      // Valida√ß√£o: motivo obrigat√≥rio se reprovar
      if (!aprovado && !motivoReprovacao) {
        throw new Error('Motivo de reprova√ß√£o √© obrigat√≥rio');
      }

      const response = await api.post(`/api/v1/justificativas/${id}/processar`, {
        aprovado,
        motivo_reprovacao: motivoReprovacao,
      });

      console.log(`‚úÖ Justificativa ${aprovado ? 'aprovada' : 'reprovada'} com sucesso`);
      return response.data;
    } catch (error) {
      console.error('Erro ao processar justificativa:', error);
      throw error;
    }
  },

  /**
   * Aprovar uma justificativa (requer permiss√£o GERENCIAR_JUSTIFICATIVAS)
   * @param {Number} id - ID da justificativa
   * @returns {Promise<Object>} Justificativa aprovada
   */
  async aprovar(id) {
    return this.processar(id, true);
  },

  /**
   * Reprovar uma justificativa (requer permiss√£o GERENCIAR_JUSTIFICATIVAS)
   * @param {Number} id - ID da justificativa
   * @param {String} motivoReprovacao - Motivo da reprova√ß√£o
   * @returns {Promise<Object>} Justificativa reprovada
   */
  async reprovar(id, motivoReprovacao) {
    return this.processar(id, false, motivoReprovacao);
  },

  /**
   * Cancelar uma solicita√ß√£o pendente (apenas o pr√≥prio usu√°rio)
   * Endpoint: DELETE /api/v1/justificativas/:id/cancelar
   * @param {Number} id - ID da justificativa
   * @returns {Promise<Object>} Justificativa cancelada
   */
  async cancelar(id) {
    try {
      const response = await api.delete(`/api/v1/justificativas/${id}/cancelar`);
      console.log('‚úÖ Justificativa cancelada com sucesso');
      return response.data;
    } catch (error) {
      console.error('Erro ao cancelar justificativa:', error);
      throw error;
    }
  },

  /**
   * Obt√©m detalhes de uma justificativa espec√≠fica
   * @param {Number} id - ID da justificativa
   * @returns {Promise<Object>} Detalhes da justificativa
   */
  async obterDetalhes(id) {
    try {
      const response = await api.get(`/api/v1/justificativas/${id}`);
      return response.data;
    } catch (error) {
      console.error('Erro ao obter detalhes da justificativa:', error);
      throw error;
    }
  },

  /**
   * Utilit√°rio: Formata o tipo de justificativa para exibi√ß√£o
   * @param {String} tipo - PONTO_FALTANTE ou CORRECAO_PONTO
   * @returns {Object} { label, icon, color, description }
   */
  formatarTipo(tipo) {
    const tipos = {
      PONTO_FALTANTE: {
        label: 'Ponto Faltante',
        icon: 'üïê',
        color: 'primary',
        description: 'Esqueci de bater o ponto',
      },
      CORRECAO_PONTO: {
        label: 'Corre√ß√£o de Ponto',
        icon: '‚úèÔ∏è',
        color: 'warning',
        description: 'Bati no hor√°rio errado',
      },
    };

    return tipos[tipo] || {
      label: tipo,
      icon: '‚ùì',
      color: 'secondary',
      description: 'Tipo desconhecido',
    };
  },

  /**
   * Utilit√°rio: Formata o status da justificativa
   * @param {String} status - PENDENTE, APROVADO, REPROVADO
   * @returns {Object} { label, color, icon }
   */
  formatarStatus(status) {
    const statusMap = {
      PENDENTE: {
        label: 'Pendente',
        color: 'warning',
        icon: '‚è≥',
      },
      APROVADO: {
        label: 'Aprovado',
        color: 'success',
        icon: '‚úÖ',
      },
      REPROVADO: {
        label: 'Reprovado',
        color: 'danger',
        icon: '‚ùå',
      },
    };

    return statusMap[status] || {
      label: status,
      color: 'secondary',
      icon: '‚ùì',
    };
  },
};

export default JustificativaService;
